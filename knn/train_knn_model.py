#!/usr/bin/env python3
"""
Script para entrenar el modelo KNN eficiente
Usa datos directamente de la base de datos PostgreSQL
"""

import sys
import os
import pandas as pd
import numpy as np
from pathlib import Path

# Agregar el directorio padre al path para importar el servicio
sys.path.append(str(Path(__file__).parent))

from knn_service import EfficientKNNService
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_database_connection():
    """Verificar conexi√≥n a la base de datos"""
    try:
        import psycopg2
        
        # Usar variables de entorno o valores por defecto
        db_host = os.getenv('DB_HOST', 'localhost')
        db_name = os.getenv('DB_NAME', 'MovieMatch')
        db_user = os.getenv('DB_USER', 'postgres')
        db_password = os.getenv('DB_PASSWORD', 'admin')
        db_port = os.getenv('DB_PORT', '5432')
        
        logger.info(f"üîå Verificando conexi√≥n a: {db_host}:{db_port}/{db_name}")
        
        connection = psycopg2.connect(
            host=db_host,
            database=db_name,
            user=db_user,
            password=db_password,
            port=db_port
        )
        
        # Verificar que hay datos
        with connection.cursor() as cursor:
            cursor.execute("SELECT COUNT(*) FROM movies")
            movie_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM user_movies WHERE rating IS NOT NULL")
            rating_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM users")
            user_count = cursor.fetchone()[0]
        
        connection.close()
        
        logger.info(f"‚úÖ Conexi√≥n exitosa a la base de datos")
        logger.info(f"üìä Datos disponibles:")
        logger.info(f"   - Pel√≠culas: {movie_count}")
        logger.info(f"   - Calificaciones: {rating_count}")
        logger.info(f"   - Usuarios: {user_count}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error conectando a la base de datos: {e}")
        logger.error("üí° Aseg√∫rate de que:")
        logger.error("   1. PostgreSQL est√© ejecut√°ndose")
        logger.error("   2. Las credenciales sean correctas")
        logger.error("   3. La base de datos 'MovieMatch' exista")
        return False

def check_dependencies():
    """Verificar dependencias necesarias"""
    logger.info("üîç Verificando dependencias...")
    
    required_packages = [
        'pandas', 'numpy', 'sklearn', 'psycopg2', 'joblib'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            logger.info(f"‚úÖ {package}")
        except ImportError:
            logger.error(f"‚ùå {package} - NO INSTALADO")
            missing_packages.append(package)
    
    if missing_packages:
        logger.error(f"\n‚ùå Paquetes faltantes: {', '.join(missing_packages)}")
        logger.error("üí° Instala con: pip install -r requirements.txt")
        return False
    
    logger.info("‚úÖ Todas las dependencias est√°n instaladas")
    return True

def train_knn_model():
    """Entrenar modelo KNN con datos de la base de datos"""
    logger.info("ü§ñ Entrenando modelo KNN con datos de la base de datos...")
    
    try:
        # Crear servicio KNN (autom√°ticamente conecta a la BD)
        knn_service = EfficientKNNService()
        
        # Verificar que se cargaron los datos
        status = knn_service.get_model_status()
        
        if not status['db_connected']:
            logger.error("‚ùå No se pudo conectar a la base de datos")
            return False
        
        if not status['movies_loaded']:
            logger.error("‚ùå No se pudieron cargar pel√≠culas desde la BD")
            return False
        
        if not status['knn_loaded']:
            logger.error("‚ùå No se pudo entrenar el modelo KNN")
            return False
        
        logger.info(f"‚úÖ Modelo KNN entrenado exitosamente")
        logger.info(f"üìä Estad√≠sticas del modelo:")
        logger.info(f"   - Pel√≠culas cargadas: {status['total_movies']}")
        logger.info(f"   - Caracter√≠sticas: {len(status['feature_columns'])}")
        logger.info(f"   - Configuraci√≥n: {status['config']}")
        
        # Guardar modelo
        knn_service.save_knn_model("knn_model.pkl")
        
        # Cerrar conexiones
        knn_service.close()
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error entrenando modelo KNN: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_knn_model():
    """Probar el modelo KNN entrenado"""
    logger.info("üß™ Probando modelo KNN...")
    
    try:
        # Cargar modelo entrenado
        knn_service = EfficientKNNService(model_path="knn_model.pkl")
        
        # Verificar estado
        status = knn_service.get_model_status()
        
        if not status['knn_loaded']:
            logger.error("‚ùå Modelo KNN no est√° cargado")
            return False
        
        # Probar con algunas pel√≠culas
        test_movies = [1, 2, 3, 4, 5]  # IDs de ejemplo
        
        for movie_id in test_movies[:3]:
            logger.info(f"üîç Probando pel√≠cula ID: {movie_id}")
            similar_movies = knn_service.find_similar_movies(movie_id, top_k=3)
            
            if similar_movies:
                logger.info(f"‚úÖ Pel√≠culas similares encontradas para {movie_id}:")
                for i, similar in enumerate(similar_movies, 1):
                    logger.info(f"   {i}. {similar['title']} (similitud: {similar['similarity_score']:.3f})")
            else:
                logger.warning(f"‚ö†Ô∏è No se encontraron pel√≠culas similares para {movie_id}")
        
        # Cerrar conexiones
        knn_service.close()
        
        logger.info("‚úÖ Pruebas del modelo completadas")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error probando modelo: {e}")
        return False

def main():
    """Funci√≥n principal"""
    logger.info("üöÄ Entrenamiento del modelo KNN con datos de BD")
    logger.info("=" * 60)
    
    # 1. Verificar dependencias
    if not check_dependencies():
        return False
    
    # 2. Verificar conexi√≥n a BD
    if not check_database_connection():
        return False
    
    # 3. Entrenar modelo
    if not train_knn_model():
        return False
    
    # 4. Probar modelo
    if not test_knn_model():
        logger.warning("‚ö†Ô∏è Las pruebas fallaron, pero el modelo se entren√≥")
    
    logger.info("\nüéâ Entrenamiento completado exitosamente!")
    logger.info("üìÅ Archivos generados:")
    logger.info("   - knn_model.pkl (modelo entrenado)")
    logger.info("\nüìã Pr√≥ximos pasos:")
    logger.info("   1. Iniciar API: python knn_api.py")
    logger.info("   2. Probar integraci√≥n: python test_knn_integration.py")
    logger.info("   3. Integrar con tu sistema usando knnApiService.js")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 